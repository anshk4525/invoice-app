generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:vH2J8RCENpXd@ep-crimson-thunder-a4gco468.us-east-1.aws.neon.tech/neondb?sslmode=require"
}

model User {
  id            String          @id @default(cuid())
  firstname     String?
  lastname      String?
  address       String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  invoices      Invoice[]     
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Invoice {
  id                    String         @id @default(uuid())
  invoiceName           String
  Total                Int
  status               InvoiceStatus
  date                 DateTime
  dueDate             Int
  fromName            String
  fromEmail           String
  fromAddress         String
  clientName          String
  clientEmail         String
  clientAddress       String
  currency            String
  InvoiceNumber       Int
  note                String?
  
  invoiceItemDescription String
  invoiceItemQuantity   Int
  invoiceItemRate       Int

  userId               String      // Foreign key to the User model
  user                 User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  created     DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum InvoiceStatus {
  PAID
  PENDING
}
